#Ubuntu version :18.04
#python version : 3.6.6

Step 1: Install prerequisites

Upgrade any pre-installed packages:
$ sudo apt-get update
$ sudo apt-get upgrade

Install developer tools used to compile OpenCV 3.0:
$ sudo apt-get install build-essential cmake git pkg-config

Install libraries and packages used to read various image formats from disk: 	
$ sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev

Install a few libraries used to read video formats from disk:
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

Install GTK so we can use OpenCV’s GUI features:
$ sudo apt-get install libgtk2.0-dev

Install packages that are used to optimize various functions inside OpenCV, such as matrix operations:
$ sudo apt-get install libatlas-base-dev gfortran

Step 2: Setup Python (Part 1)

We’ll be using virtualenv and virtualenvwrapper in this tutorial. These packages allow us to create entirely separate and independent Python environments, ensuring that we don’t junk up our system Python install (and more importantly, so we can have a separate Python environment for each of our projects).

use pip to install virtualenv  and virtualenvwrapper :
$ pip install virtualenv virtualenvwrapper

update ~/.bashrc file 	
# virtualenv and virtualenvwrapper
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.6
export WORKON_HOME=$HOME/.virtualenvs
source /home/tester/.local/bin/virtualenvwrapper.sh

Note python&virtualenvwrapper.sh path
$ whereis python
$ find / -name virtualenvwrapper.sh

reload your  ~/.bashrc  file:
$ source ~/.bashrc

create our cv  virtual environment where we’ll be doing our computer vision development using OpenCV 3.0 and Python 3.6:
$ mkvirtualenv cv




